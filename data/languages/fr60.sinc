
define token instr (16)
    op16     = (0,15)
    op12     = (4,15)
    op8      = (8,15)
    op5      = (11,15)
    op4      = (12,15)
    cc       = (8,11)

    i8       = (4,11)
    o8       = (4,11)
    u4       = (4,7)
    i4       = (4,7)
    rj       = (4,7)
    rs4_4    = (4,7)

    rel11    = (0,10)
    u8       = (0,7)
    s8       = (0,7)
    rel8     = (0,7)
    dir8     = (0,7)
    rlist_lo = (0,7)
    rlist_hi = (0,7)

    ri       = (0,3)
    rs       = (0,3)
;

define token instr48 (48)
    op48_12  = (36,47)
    ri48_4   = (32,35)
    i32      = (0,31)
;

define token instr32 (32)
    op32_8   = (24,31)
    i20_4h   = (20,23)
    ri32_4   = (16,19)
    i20_16l  = (0,15)

    op32_12  = (20,31)
    u32_4    = (16,19)
    cc32_6   = (10,15)
    cc32_2   = (8,9)
    crj32_4  = (4,7)
    cri32_4  = (0,3)
;

attach variables [ ri rj ri48_4 ri32_4 ] [ R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 AC FP SP ];
attach variables [ rs rs4_4 ] [ TBR RP SSP USP MDH MDL _ _ _ _ _ _ _ _ _ _ ];
attach variables [ cc ] [ RA NO EQ NE C NC N P V NV LT GE LE GT LS HI ];
attach names [ cc32_2 ] [ ADD SUB MUL DIV ];

attach names [ rlist_lo ] [
  null
  "R0" "R1" "R0, R1" "R2" "R0, R2" "R1, R2" "R0, R1, R2" "R3"
  "R0, R3" "R1, R3" "R0, R1, R3" "R2, R3" "R0, R2, R3" "R1, R2, R3" "R0, R1, R2, R3" "R4"
  "R0, R4" "R1, R4" "R0, R1, R4" "R2, R4" "R0, R2, R4" "R1, R2, R4" "R0, R1, R2, R4" "R3, R4"
  "R0, R3, R4" "R1, R3, R4" "R0, R1, R3, R4" "R2, R3, R4" "R0, R2, R3, R4" "R1, R2, R3, R4" "R0, R1, R2, R3, R4" "R5"
  "R0, R5" "R1, R5" "R0, R1, R5" "R2, R5" "R0, R2, R5" "R1, R2, R5" "R0, R1, R2, R5" "R3, R5"
  "R0, R3, R5" "R1, R3, R5" "R0, R1, R3, R5" "R2, R3, R5" "R0, R2, R3, R5" "R1, R2, R3, R5" "R0, R1, R2, R3, R5" "R4, R5"
  "R0, R4, R5" "R1, R4, R5" "R0, R1, R4, R5" "R2, R4, R5" "R0, R2, R4, R5" "R1, R2, R4, R5" "R0, R1, R2, R4, R5" "R3, R4, R5"
  "R0, R3, R4, R5" "R1, R3, R4, R5" "R0, R1, R3, R4, R5" "R2, R3, R4, R5" "R0, R2, R3, R4, R5" "R1, R2, R3, R4, R5" "R0, R1, R2, R3, R4, R5" "R6"
  "R0, R6" "R1, R6" "R0, R1, R6" "R2, R6" "R0, R2, R6" "R1, R2, R6" "R0, R1, R2, R6" "R3, R6"
  "R0, R3, R6" "R1, R3, R6" "R0, R1, R3, R6" "R2, R3, R6" "R0, R2, R3, R6" "R1, R2, R3, R6" "R0, R1, R2, R3, R6" "R4, R6"
  "R0, R4, R6" "R1, R4, R6" "R0, R1, R4, R6" "R2, R4, R6" "R0, R2, R4, R6" "R1, R2, R4, R6" "R0, R1, R2, R4, R6" "R3, R4, R6"
  "R0, R3, R4, R6" "R1, R3, R4, R6" "R0, R1, R3, R4, R6" "R2, R3, R4, R6" "R0, R2, R3, R4, R6" "R1, R2, R3, R4, R6" "R0, R1, R2, R3, R4, R6" "R5, R6"
  "R0, R5, R6" "R1, R5, R6" "R0, R1, R5, R6" "R2, R5, R6" "R0, R2, R5, R6" "R1, R2, R5, R6" "R0, R1, R2, R5, R6" "R3, R5, R6"
  "R0, R3, R5, R6" "R1, R3, R5, R6" "R0, R1, R3, R5, R6" "R2, R3, R5, R6" "R0, R2, R3, R5, R6" "R1, R2, R3, R5, R6" "R0, R1, R2, R3, R5, R6" "R4, R5, R6"
  "R0, R4, R5, R6" "R1, R4, R5, R6" "R0, R1, R4, R5, R6" "R2, R4, R5, R6" "R0, R2, R4, R5, R6" "R1, R2, R4, R5, R6" "R0, R1, R2, R4, R5, R6" "R3, R4, R5, R6"
  "R0, R3, R4, R5, R6" "R1, R3, R4, R5, R6" "R0, R1, R3, R4, R5, R6" "R2, R3, R4, R5, R6" "R0, R2, R3, R4, R5, R6" "R1, R2, R3, R4, R5, R6" "R0, R1, R2, R3, R4, R5, R6" "R7"
  "R0, R7" "R1, R7" "R0, R1, R7" "R2, R7" "R0, R2, R7" "R1, R2, R7" "R0, R1, R2, R7" "R3, R7"
  "R0, R3, R7" "R1, R3, R7" "R0, R1, R3, R7" "R2, R3, R7" "R0, R2, R3, R7" "R1, R2, R3, R7" "R0, R1, R2, R3, R7" "R4, R7"
  "R0, R4, R7" "R1, R4, R7" "R0, R1, R4, R7" "R2, R4, R7" "R0, R2, R4, R7" "R1, R2, R4, R7" "R0, R1, R2, R4, R7" "R3, R4, R7"
  "R0, R3, R4, R7" "R1, R3, R4, R7" "R0, R1, R3, R4, R7" "R2, R3, R4, R7" "R0, R2, R3, R4, R7" "R1, R2, R3, R4, R7" "R0, R1, R2, R3, R4, R7" "R5, R7"
  "R0, R5, R7" "R1, R5, R7" "R0, R1, R5, R7" "R2, R5, R7" "R0, R2, R5, R7" "R1, R2, R5, R7" "R0, R1, R2, R5, R7" "R3, R5, R7"
  "R0, R3, R5, R7" "R1, R3, R5, R7" "R0, R1, R3, R5, R7" "R2, R3, R5, R7" "R0, R2, R3, R5, R7" "R1, R2, R3, R5, R7" "R0, R1, R2, R3, R5, R7" "R4, R5, R7"
  "R0, R4, R5, R7" "R1, R4, R5, R7" "R0, R1, R4, R5, R7" "R2, R4, R5, R7" "R0, R2, R4, R5, R7" "R1, R2, R4, R5, R7" "R0, R1, R2, R4, R5, R7" "R3, R4, R5, R7"
  "R0, R3, R4, R5, R7" "R1, R3, R4, R5, R7" "R0, R1, R3, R4, R5, R7" "R2, R3, R4, R5, R7" "R0, R2, R3, R4, R5, R7" "R1, R2, R3, R4, R5, R7" "R0, R1, R2, R3, R4, R5, R7" "R6, R7"
  "R0, R6, R7" "R1, R6, R7" "R0, R1, R6, R7" "R2, R6, R7" "R0, R2, R6, R7" "R1, R2, R6, R7" "R0, R1, R2, R6, R7" "R3, R6, R7"
  "R0, R3, R6, R7" "R1, R3, R6, R7" "R0, R1, R3, R6, R7" "R2, R3, R6, R7" "R0, R2, R3, R6, R7" "R1, R2, R3, R6, R7" "R0, R1, R2, R3, R6, R7" "R4, R6, R7"
  "R0, R4, R6, R7" "R1, R4, R6, R7" "R0, R1, R4, R6, R7" "R2, R4, R6, R7" "R0, R2, R4, R6, R7" "R1, R2, R4, R6, R7" "R0, R1, R2, R4, R6, R7" "R3, R4, R6, R7"
  "R0, R3, R4, R6, R7" "R1, R3, R4, R6, R7" "R0, R1, R3, R4, R6, R7" "R2, R3, R4, R6, R7" "R0, R2, R3, R4, R6, R7" "R1, R2, R3, R4, R6, R7" "R0, R1, R2, R3, R4, R6, R7" "R5, R6, R7"
  "R0, R5, R6, R7" "R1, R5, R6, R7" "R0, R1, R5, R6, R7" "R2, R5, R6, R7" "R0, R2, R5, R6, R7" "R1, R2, R5, R6, R7" "R0, R1, R2, R5, R6, R7" "R3, R5, R6, R7"
  "R0, R3, R5, R6, R7" "R1, R3, R5, R6, R7" "R0, R1, R3, R5, R6, R7" "R2, R3, R5, R6, R7" "R0, R2, R3, R5, R6, R7" "R1, R2, R3, R5, R6, R7" "R0, R1, R2, R3, R5, R6, R7" "R4, R5, R6, R7"
  "R0, R4, R5, R6, R7" "R1, R4, R5, R6, R7" "R0, R1, R4, R5, R6, R7" "R2, R4, R5, R6, R7" "R0, R2, R4, R5, R6, R7" "R1, R2, R4, R5, R6, R7" "R0, R1, R2, R4, R5, R6, R7" "R3, R4, R5, R6, R7"
  "R0, R3, R4, R5, R6, R7" "R1, R3, R4, R5, R6, R7" "R0, R1, R3, R4, R5, R6, R7" "R2, R3, R4, R5, R6, R7" "R0, R2, R3, R4, R5, R6, R7" "R1, R2, R3, R4, R5, R6, R7" "R0, R1, R2, R3, R4, R5, R6, R7"
];

attach names [ rlist_hi ] [
  null
  "R8" "R9" "R8, R9" "R10" "R8, R10" "R9, R10" "R8, R9, R10" "R11"
  "R8, R11" "R9, R11" "R8, R9, R11" "R10, R11" "R8, R10, R11" "R9, R10, R11" "R8, R9, R10, R11" "R12"
  "R8, R12" "R9, R12" "R8, R9, R12" "R10, R12" "R8, R10, R12" "R9, R10, R12" "R8, R9, R10, R12" "R11, R12"
  "R8, R11, R12" "R9, R11, R12" "R8, R9, R11, R12" "R10, R11, R12" "R8, R10, R11, R12" "R9, R10, R11, R12" "R8, R9, R10, R11, R12" "R13"
  "R8, R13" "R9, R13" "R8, R9, R13" "R10, R13" "R8, R10, R13" "R9, R10, R13" "R8, R9, R10, R13" "R11, R13"
  "R8, R11, R13" "R9, R11, R13" "R8, R9, R11, R13" "R10, R11, R13" "R8, R10, R11, R13" "R9, R10, R11, R13" "R8, R9, R10, R11, R13" "R12, R13"
  "R8, R12, R13" "R9, R12, R13" "R8, R9, R12, R13" "R10, R12, R13" "R8, R10, R12, R13" "R9, R10, R12, R13" "R8, R9, R10, R12, R13" "R11, R12, R13"
  "R8, R11, R12, R13" "R9, R11, R12, R13" "R8, R9, R11, R12, R13" "R10, R11, R12, R13" "R8, R10, R11, R12, R13" "R9, R10, R11, R12, R13" "R8, R9, R10, R11, R12, R13" "R14"
  "R8, R14" "R9, R14" "R8, R9, R14" "R10, R14" "R8, R10, R14" "R9, R10, R14" "R8, R9, R10, R14" "R11, R14"
  "R8, R11, R14" "R9, R11, R14" "R8, R9, R11, R14" "R10, R11, R14" "R8, R10, R11, R14" "R9, R10, R11, R14" "R8, R9, R10, R11, R14" "R12, R14"
  "R8, R12, R14" "R9, R12, R14" "R8, R9, R12, R14" "R10, R12, R14" "R8, R10, R12, R14" "R9, R10, R12, R14" "R8, R9, R10, R12, R14" "R11, R12, R14"
  "R8, R11, R12, R14" "R9, R11, R12, R14" "R8, R9, R11, R12, R14" "R10, R11, R12, R14" "R8, R10, R11, R12, R14" "R9, R10, R11, R12, R14" "R8, R9, R10, R11, R12, R14" "R13, R14"
  "R8, R13, R14" "R9, R13, R14" "R8, R9, R13, R14" "R10, R13, R14" "R8, R10, R13, R14" "R9, R10, R13, R14" "R8, R9, R10, R13, R14" "R11, R13, R14"
  "R8, R11, R13, R14" "R9, R11, R13, R14" "R8, R9, R11, R13, R14" "R10, R11, R13, R14" "R8, R10, R11, R13, R14" "R9, R10, R11, R13, R14" "R8, R9, R10, R11, R13, R14" "R12, R13, R14"
  "R8, R12, R13, R14" "R9, R12, R13, R14" "R8, R9, R12, R13, R14" "R10, R12, R13, R14" "R8, R10, R12, R13, R14" "R9, R10, R12, R13, R14" "R8, R9, R10, R12, R13, R14" "R11, R12, R13, R14"
  "R8, R11, R12, R13, R14" "R9, R11, R12, R13, R14" "R8, R9, R11, R12, R13, R14" "R10, R11, R12, R13, R14" "R8, R10, R11, R12, R13, R14" "R9, R10, R11, R12, R13, R14" "R8, R9, R10, R11, R12, R13, R14" "R15"
  "R8, R15" "R9, R15" "R8, R9, R15" "R10, R15" "R8, R10, R15" "R9, R10, R15" "R8, R9, R10, R15" "R11, R15"
  "R8, R11, R15" "R9, R11, R15" "R8, R9, R11, R15" "R10, R11, R15" "R8, R10, R11, R15" "R9, R10, R11, R15" "R8, R9, R10, R11, R15" "R12, R15"
  "R8, R12, R15" "R9, R12, R15" "R8, R9, R12, R15" "R10, R12, R15" "R8, R10, R12, R15" "R9, R10, R12, R15" "R8, R9, R10, R12, R15" "R11, R12, R15"
  "R8, R11, R12, R15" "R9, R11, R12, R15" "R8, R9, R11, R12, R15" "R10, R11, R12, R15" "R8, R10, R11, R12, R15" "R9, R10, R11, R12, R15" "R8, R9, R10, R11, R12, R15" "R13, R15"
  "R8, R13, R15" "R9, R13, R15" "R8, R9, R13, R15" "R10, R13, R15" "R8, R10, R13, R15" "R9, R10, R13, R15" "R8, R9, R10, R13, R15" "R11, R13, R15"
  "R8, R11, R13, R15" "R9, R11, R13, R15" "R8, R9, R11, R13, R15" "R10, R11, R13, R15" "R8, R10, R11, R13, R15" "R9, R10, R11, R13, R15" "R8, R9, R10, R11, R13, R15" "R12, R13, R15"
  "R8, R12, R13, R15" "R9, R12, R13, R15" "R8, R9, R12, R13, R15" "R10, R12, R13, R15" "R8, R10, R12, R13, R15" "R9, R10, R12, R13, R15" "R8, R9, R10, R12, R13, R15" "R11, R12, R13, R15"
  "R8, R11, R12, R13, R15" "R9, R11, R12, R13, R15" "R8, R9, R11, R12, R13, R15" "R10, R11, R12, R13, R15" "R8, R10, R11, R12, R13, R15" "R9, R10, R11, R12, R13, R15" "R8, R9, R10, R11, R12, R13, R15" "R14, R15"
  "R8, R14, R15" "R9, R14, R15" "R8, R9, R14, R15" "R10, R14, R15" "R8, R10, R14, R15" "R9, R10, R14, R15" "R8, R9, R10, R14, R15" "R11, R14, R15"
  "R8, R11, R14, R15" "R9, R11, R14, R15" "R8, R9, R11, R14, R15" "R10, R11, R14, R15" "R8, R10, R11, R14, R15" "R9, R10, R11, R14, R15" "R8, R9, R10, R11, R14, R15" "R12, R14, R15"
  "R8, R12, R14, R15" "R9, R12, R14, R15" "R8, R9, R12, R14, R15" "R10, R12, R14, R15" "R8, R10, R12, R14, R15" "R9, R10, R12, R14, R15" "R8, R9, R10, R12, R14, R15" "R11, R12, R14, R15"
  "R8, R11, R12, R14, R15" "R9, R11, R12, R14, R15" "R8, R9, R11, R12, R14, R15" "R10, R11, R12, R14, R15" "R8, R10, R11, R12, R14, R15" "R9, R10, R11, R12, R14, R15" "R8, R9, R10, R11, R12, R14, R15" "R13, R14, R15"
  "R8, R13, R14, R15" "R9, R13, R14, R15" "R8, R9, R13, R14, R15" "R10, R13, R14, R15" "R8, R10, R13, R14, R15" "R9, R10, R13, R14, R15" "R8, R9, R10, R13, R14, R15" "R11, R13, R14, R15"
  "R8, R11, R13, R14, R15" "R9, R11, R13, R14, R15" "R8, R9, R11, R13, R14, R15" "R10, R11, R13, R14, R15" "R8, R10, R11, R13, R14, R15" "R9, R10, R11, R13, R14, R15" "R8, R9, R10, R11, R13, R14, R15" "R12, R13, R14, R15"
  "R8, R12, R13, R14, R15" "R9, R12, R13, R14, R15" "R8, R9, R12, R13, R14, R15" "R10, R12, R13, R14, R15" "R8, R10, R12, R13, R14, R15" "R9, R10, R12, R13, R14, R15" "R8, R9, R10, R12, R13, R14, R15" "R11, R12, R13, R14, R15"
  "R8, R11, R12, R13, R14, R15" "R9, R11, R12, R13, R14, R15" "R8, R9, R11, R12, R13, R14, R15" "R10, R11, R12, R13, R14, R15" "R8, R10, R11, R12, R13, R14, R15" "R9, R10, R11, R12, R13, R14, R15" "R8, R9, R10, R11, R12, R13, R14, R15"
];

macro resultFlags(result) {
    $(N_flag) = (result s< 0);
    $(Z_flag) = (result == 0);
}

macro addFlags(result, val1, val2) {
    resultFlags(result);
    $(V_flag) = ((val1 s>= 0) & (val2 s>= 0) & (result s< 0)) | ((val1 s< 0) & (val2 s< 0) & (result s>= 0));
    $(C_flag) = scarry(val1, val2);
}

macro subFlags(result, val1, val2) {
    resultFlags(result);
    $(V_flag) = ((val1 s< 0) & (val2 s>= 0) & (result s< 0)) | ((val1 s>= 0) & (val2 s< 0) & (result s>= 0));
    $(C_flag) = sborrow(val1, val2);
}

macro mulFlags64(result, val1, val2) {
    $(N_flag) = (result s< 0);
    $(Z_flag) = (result == 0);
    $(V_flag) = (val1 > 0 && (val1 > (0xFFFFFFFFFFFFFFFF / val2)));
}

macro mulFlagsH(result, val1, val2) {
    resultFlags(result);
}

# ====

# 4 bit immediates don't convert cleanly with zext/sext
signedi_4: i4 is i4 {
    local value:4 = 0x0000000F & i4;

    local check:1 = 0x8 & i4;
    if (check == 0) goto <END>;

    value = value + 0xFFFFFFF0;

    <END>
    export value;
}

usignedi_4: i4 is i4 {
    local value:4 = 0x0000000F & i4;
    export value;
}

usignedi20h: i20_4h is i20_4h {
    local value:4 = 0x0000000F & i20_4h;
    export value;
}

sextrel11: rel11 is rel11 {
    local value:4 = 0x000007FF & rel11;

    local check:3 = 0x400 & rel11;
    if (check == 0) goto <END>;

    value = value + 0xFFFFF800;

    <END>
    export value;
}

bandl_ext: u4 is u4 {
    local value:1 = 0xff & u4;
    export value;
}

bandh_ext: u4 is u4 {
    local offset:1 = u4 << 4;
    local value:1 = 0xff & offset;
    export value;
}

borl_ext: u4 is u4 {
    local value:1 = 0x0f & u4;
    export value;
}

borh_ext: u4 is u4 {
    local offset:1 = u4 << 4;
    local value:1 = 0xf0 & offset;
    export value;
}

REL: reloc is rel8 [ reloc = inst_next + (rel8 * 2); ] {
    export *:2 reloc;
}

REL_SEXT11: reloc is rel11 [ reloc = inst_next + (rel11 * 2); ] {
    export *:2 reloc;
}

TBR_REL: reloc is u8 [ reloc = ((TBR + 0x3FC) - (u8 * 4)); ] {
    export *:2 reloc;
}

:ADD rj, ri is op8=0xa6 & rj & ri {
    tmpi:4 = ri;
    ri = ri + rj;
    addFlags(ri, tmpi, rj);
}

:ADD #usignedi_4, ri is op8=0xa4 & usignedi_4 & ri {
    local tmpi:4 = ri;
    ri = ri + usignedi_4;
    addFlags(ri, tmpi, usignedi_4);
}

:ADD2 #signedi_4, ri is op8=0xa5 & signedi_4 & ri {
    tmpi:4 = ri;
    ri = ri + signedi_4;
    addFlags(ri, tmpi, signedi_4);
}

:ADDC rj, ri is op8=0xa7 & rj & ri {
    tmpi:4 = ri;
    flag:4 = zext($(C_flag));
    ri = ri + rj + flag;
    addFlags(ri, tmpi, (rj + flag));
}

:ADDN rj, ri is op8=0xa2 & rj & ri {
    ri = ri + rj;
}

:ADDN #usignedi_4, ri is op8=0xa0 & usignedi_4 & ri {
    ri = ri + usignedi_4;
}

:ADDN2 #signedi_4, ri is op8=0xa1 & signedi_4 & ri {
    ri = ri + signedi_4;
}

# ====

:SUB rj, ri is op8=0xac & rj & ri {
    tmpi:4 = ri;
    ri = ri - rj;
    subFlags(ri, tmpi, rj);
}

:SUBC rj, ri is op8=0xad & rj & ri {
    tmpi:4 = ri;
    ri = ri - rj - zext($(C_flag));
    subFlags(ri, tmpi, (rj - zext($(C_flag))));
}

:SUBN rj, ri is op8=0xae & rj & ri {
    ri = ri - rj;
}

# ====

:CMP rj, ri is op8=0xaa & rj & ri {
    res:4 = ri - rj;
    subFlags(res, ri, rj);
}

:CMP usignedi_4, ri is op8=0xa8 & usignedi_4 & ri {
    res:4 = ri - usignedi_4;
    subFlags(res, ri, usignedi_4);
}

:CMP2 signedi_4, ri is op8=0xa9 & signedi_4 & ri {
    res:4 = ri - signedi_4;
    subFlags(res, ri, signedi_4);
}

# ====

:AND rj, ri is op8=0x82 & rj & ri {
    ri = ri & rj;
    resultFlags(ri);
}

:AND rj, @ri is op8=0x84 & rj & ri {
    *ri = *:4 ri & rj;
    resultFlags(*:4 ri);
}

:ANDH rj, @ri is op8=0x85 & rj & ri {
    *ri = *:2 ri & rj:2;
    resultFlags(*:2 ri);
}

:ANDB rj, @ri is op8=0x86 & rj & ri {
    *ri = *:1 ri & rj:1;
    resultFlags(*:1 ri);
}

# ====

:OR rj, ri is op8=0x92 & rj & ri {
    ri = ri | rj;
    resultFlags(ri);
}

:OR rj, @ri is op8=0x94 & rj & ri {
    *ri = *:4 ri & rj;
    resultFlags(*:4 ri);
}

:ORH rj, @ri is op8=0x95 & rj & ri {
    *ri = *:2 ri & rj:2;
    resultFlags(*:2 ri);
}

:ORB rj, @ri is op8=0x96 & rj & ri {
    *ri = *:1 ri & rj:1;
    resultFlags(*:1 ri);
}

# ====

:EOR rj, ri is op8=0x9a & rj & ri {
    ri = ri ^ rj;
    resultFlags(ri);
}

:EOR rj, @ri is op8=0x9c & rj & ri {
    *ri = *:4 ri ^ rj;
    resultFlags(*:4 ri);
}

:EORH rj, @ri is op8=0x9d & rj & ri {
    *ri = *:2 ri ^ rj:2;
    resultFlags(*:2 ri);
}

:EORB rj, @ri is op8=0x9e & rj & ri {
    *ri = *:1 ri ^ rj:1;
    resultFlags(*:1 ri);
}

# ====

:BANDL #bandl_ext, @ri is op8=0x80 & bandl_ext & ri {
    *ri = bandl_ext & *:1 ri;
}

:BANDH #bandh_ext, @ri is op8=0x81 & bandh_ext & ri {
    *ri = bandh_ext & *:1 ri;
}

# ====

:BORL #borl_ext, @ri is op8=0x90 & borl_ext & ri {
    *ri = borl_ext | *:1 ri;
}

:BORH #borh_ext, @ri is op8=0x91 & borh_ext & ri {
    *ri = borh_ext | *:1 ri;
}

# ====

:BEORL #borl_ext, @ri is op8=0x98 & borl_ext & ri {
    *ri = borl_ext ^ *:1 ri;
}

:BEORH #borh_ext, @ri is op8=0x99 & borh_ext & ri {
    *ri = borh_ext ^ *:1 ri;
}

# ====

:BTSTL #bandl_ext, @ri is op8=0x88 & bandl_ext & ri {
    local result:1 = bandl_ext & *:1 ri;
    result = result & 0x0f;
    $(N_flag) = 0;
    $(Z_flag) = result == 0;
}

:BTSTH #bandh_ext, @ri is op8=0x89 & bandh_ext & ri {
    local result:1 = bandh_ext & *:1 ri;
    result = result & 0xf0;
    $(N_flag) = result s< 0;
    $(Z_flag) = result == 0;
}

# ====

:MUL rj, ri is op8=0xaf & rj & ri {
    local full:8 = sext(rj) * sext(ri);
    MDL = full:4;
    MDH = full(4);
    mulFlags64(full, rj, ri);
}

:MULU rj, ri is op8=0xab & rj & ri {
    local full:8 = zext(rj) * zext(ri);
    MDL = full:4;
    MDH = full(4);
    mulFlags64(full, rj, ri);
}

:MULH rj, ri is op8=0xbf & rj & ri {
    MDL = sext(rj:2) * sext(ri:2);
    mulFlagsH(MDL, rj, ri);
}

:MULUH rj, ri is op8=0xbb & rj & ri {
    MDL = zext(rj:2) * zext(ri:2);
    mulFlagsH(MDL, rj, ri);
}

# ====

:DIV0S ri is op12=0x974 & ri {
    $(D0_flag) = MDL s< 0;
    $(D1_flag) = MDL[31,1] == ri[31,1];
    local ext64:8 = sext(MDL);
    MDL = ext64:4;
    MDH = ext64(4);
}

:DIV0U ri is op12=0x975 & ri {
    $(D_flag) = 0b00;
    MDH = 0x00000000;
}

:DIV1 ri is op12=0x976 & ri {
    MDH = MDH << 1;
    MDL = MDL << 1;

    local temp:4 = 0x00000000;

    if ($(D1_flag) != 0b1) goto <D1_ZERO_OP>;
        temp = MDH + ri;
        $(C_flag) = scarry(MDH, ri);
        goto <D1_OP>;
    <D1_ZERO_OP>
        temp = MDH - ri;
        $(C_flag) = sborrow(MDH, ri);
    <D1_OP>

    if ($(D0_flag) ^ $(D1_flag) ^ $(C_flag) != 0b0) goto <END>;
        MDH = temp;
        MDL[0,1] = 0b1;
    <END>

    $(Z_flag) = MDH == 0;
}

:DIV2 ri is op12=0x977 & ri {
    if ($(D1_flag) != 0b1) goto <D1_ZERO_OP2>;
        $(C_flag) = scarry(MDH, ri);
        $(Z_flag) = (MDH + ri) == 0;
        goto <D1_OP2>;
    <D1_ZERO_OP2>
        $(C_flag) = sborrow(MDH, ri);
        $(Z_flag) = (MDH - ri) == 0;
    <D1_OP2>

    if ($(Z_flag) != 0b1) goto <END>;
        MDH = 0x00000000;
    <END>
   $(Z_flag) = MDH == 0;
}

:DIV3 is op16=0x9f60 & ri {
    if ($(Z_flag) != 0b1) goto <END>;
        MDL = MDL + 0x1;
    <END>
}

:DIV4S is op16=0x9f70 & ri {
    if ($(D1_flag) != 0b1) goto <END>;
        MDL = 0x0 - MDL;
    <END>
}

# ====

:LSL rj, ri is op8=0xb6 & rj & ri {
    if (rj[0,5] == 0) goto <END>;
        local shiftAmount:2 = zext(rj[0,5]);
        ri = ri << (shiftAmount - 1);
        $(C_flag) = ri[31,1];
        ri = ri << 1;
    <END>

    resultFlags(ri);
}

:LSL #usignedi_4, ri is op8=0xb4 & usignedi_4 & ri {
    if (usignedi_4 == 0) goto <END>;
        ri = ri << (usignedi_4 - 1);
        $(C_flag) = ri[31,1];
        ri = ri << 1;
    <END>

    resultFlags(ri);
}

:LSL2 #usignedi_4, ri is op8=0xb5 & usignedi_4 & ri {
    local amount = usignedi_4 + 15;
    ri = ri << amount;
    $(C_flag) = ri[31,1];
    ri = ri << 1;

    resultFlags(ri);
}

# ====

:LSR rj, ri is op8=0xb2 & rj & ri {
    if (rj[0,5] == 0) goto <END>;
        local shiftAmount:2 = zext(rj[0,5]);
        ri = ri >> (shiftAmount - 1);
        $(C_flag) = ri[0,1];
        ri = ri >> 1;
    <END>

    resultFlags(ri);
}

:LSR #usignedi_4, ri is op8=0xb0 & usignedi_4 & ri {
    if (usignedi_4 == 0) goto <END>;
        ri = ri >> (usignedi_4 - 1);
        $(C_flag) = ri[0,1];
        ri = ri >> 1;
    <END>

    resultFlags(ri);
}

:LSR2 #usignedi_4, ri is op8=0xb1 & usignedi_4 & ri {
    local amount = usignedi_4 + 15;
    ri = ri >> amount;
    $(C_flag) = ri[0,1];
    ri = ri >> 1;

    resultFlags(ri);
}

# ====

:ASR rj, ri is op8=0xba & rj & ri {
    if (rj[0,5] == 0) goto <END>;
        local shiftAmount:2 = zext(rj[0,5]);
        ri = ri s>> (shiftAmount - 1);
        $(C_flag) = ri[0,1];
        ri = ri s>> 1;
    <END>

    resultFlags(ri);
}

:ASR #usignedi_4, ri is op8=0xb8 & usignedi_4 & ri {
    if (usignedi_4 == 0) goto <END>;
        ri = ri s>> (usignedi_4 - 1);
        $(C_flag) = ri[0,1];
        ri = ri s>> 1;
    <END>

    resultFlags(ri);
}

:ASR2 #usignedi_4, ri is op8=0xb9 & usignedi_4 & ri {
    local amount = usignedi_4 + 15;
    ri = ri s>> amount;
    $(C_flag) = ri[0,1];
    ri = ri s>> 1;

    resultFlags(ri);
}

# ====

:LDI_32 #i32, ri48_4 is op48_12=0x9f8 & i32 & ri48_4 {
    ri48_4 = i32;
}

:LDI_20 #usignedi20h^i20_16l, ri32_4 is op32_8=0x9b & usignedi20h & i20_16l & ri32_4 {
    local high:4 = usignedi20h << 16;
    local low:4 = zext(i20_16l:2);
    ri32_4 = high + low;
}

:LDI_8 #i8, ri is op4=0xc & i8 & ri {
    ri = zext(i8:1);
}

# ====

:LD @rj, ri is op8=0x04 & rj & ri {
    ri = *:4 rj;
}

:LD @("AC", rj), ri is op8=0x00 & rj & ri {
    local pointer:4 = AC + rj;
    ri = *:4 pointer;
}

:LD @("FP", o8), ri is op4=0x2 & o8 & ri {
    local pointer:4 = FP + (sext(o8:2) * 4);
    ri = *:4 pointer;
}

:LD @("SP", usignedi_4), ri is op8=0x03 & usignedi_4 & ri {
    local pointer:4 = SP + (usignedi_4 * 4);
    ri = *:4 pointer;
}

:LD @"SP"+, ri is op12=0x070 & ri {
    ri = *:4 SP;
    SP = SP + 4;
}

:LD @"SP"+, rs is op12=0x078 & rs {
    rs = *:4 SP;
    SP = SP + 4;
}

:LD @"SP"+, "PS" is op16=0x0790 {
    PS = *:4 SP;
    SP = SP + 4;
}

# ====

:LDUH @rj, ri is op8=0x05 & rj & ri {
    ri = zext(*:2 rj);
}

:LDUH @("AC", rj), ri is op8=0x01 & rj & ri {
    local pointer:4 = AC + rj;
    ri = zext(*:2 pointer);
}

:LDUH @("FP", o8), ri is op4=0x4 & o8 & ri {
    local pointer:4 = FP + (sext(o8:2) * 2);
    ri = zext(*:2 pointer);
}

# ====

:LDUB @rj, ri is op8=0x06 & rj & ri {
    ri = zext(*:1 rj);
}

:LDUB @("AC", rj), ri is op8=0x02 & rj & ri {
    local pointer:4 = AC + rj;
    ri = zext(*:1 pointer);
}

:LDUB @("FP", o8), ri is op4=0x6 & o8 & ri {
    local pointer:4 = FP + (sext(o8:2) * 2);
    ri = zext(*:2 pointer);
}

# ====

:ST ri, @rj is op8=0x14 & rj & ri {
    *:4 rj = ri;
}

:ST ri, @("AC", rj) is op8=0x10 & rj & ri {
    local pointer:4 = AC + rj;
    *:4 pointer = ri;
}

:ST ri, @("FP", o8) is op4=0x3 & o8 & ri {
    local pointer:4 = FP + (sext(o8:2) * 4);
    *:4 pointer = ri;
}

:ST ri, @("SP", signedi_4) is op8=0x13 & signedi_4 & ri {
    local pointer:4 = SP + (signedi_4 * 4);
    *:4 pointer = ri;
}

:ST ri @"-SP" is op12=0x170 & ri {
    SP = SP - 4;
    *:4 SP = ri;
}

:ST rs @"-SP" is op12=0x178 & rs {
    SP = SP - 4;
    *:4 SP = rs;
}

:ST "PS", @"-SP" is op16=0x1790 {
    SP = SP - 4;
    *:4 SP = PS;
}

# ====

:STH ri, @rj is op8=0x15 & rj & ri {
    *:2 rj = ri:2;
}

:STH ri, @("AC", rj) is op8=0x11 & rj & ri {
    local pointer:4 = AC + rj;
    *:2 pointer = ri:2;
}

:STH ri, @("FP", o8) is op4=0x5 & o8 & ri {
    local pointer:4 = FP + (sext(o8:2) * 2);
    *:2 pointer = ri:2;
}

# ====

:STB ri, @rj is op8=0x16 & rj & ri {
    *:1 rj = ri:1;
}

:STB ri, @("AC", rj) is op8=0x12 & rj & ri {
    local pointer:4 = AC + rj;
    *:1 pointer = ri:1;
}

:STB ri, @("FP", o8) is op4=0x7 & o8 & ri {
    local pointer:4 = FP + (sext(o8:2) * 2);
    *:1 pointer = ri:1;
}

# ====

:MOV rj, ri is op8=0x8b & rj & ri {
    ri = rj;
}

:MOV rs4_4, ri is op8=0xb7 & rs4_4 & ri {
    ri = rs4_4;
}

:MOV "PS", ri is op12=0x171 & ri {
    ri = PS;
}

:MOV ri, rs4_4 is op8=0xb3 & rs4_4 & ri {
    rs4_4 = ri;
}

:MOV ri, "PS" is op12=0x071 & ri {
    PS = ri;
}

# ====

:JMP @ri is op12=0x970 & ri {
    goto [ri];
}

:CALL REL_SEXT11 is op5=0x1A & REL_SEXT11 {
    RP = inst_next;
    call REL_SEXT11;
}

:CALL @ri is op12=0x971 & ri {
    RP = inst_next;
    call [ri];
}

:RET is op16=0x9720 {
    return [RP];
}

:INT #TBR_REL is op8=0x1f & TBR_REL {
    SSP = SSP - 4;
    *:4 SSP = PS;
    SSP = SSP - 4;
    *:4 SSP = inst_next + 2;
    $(I_flag) = 0b0;
    $(S_flag) = 0b0;
    call TBR_REL;
}

:INTE is op16=0x9F30 unimpl # Emulator only

:RETI is op16=0x9730 {
    local tempsp:2 = *:2 SP;
    SP = SP + 4;
    PS = *:4 SP;
    SP = SP + 4;
    return [tempsp];
}

# ====

:BRA REL is op4=0xe & cc=0x0 & REL {
    goto REL;
}

:BNO REL is op4=0xe & cc=0x1 & REL {}

:BEQ REL is op4=0xe & cc=0x2 & REL {
    if ($(Z_flag) == 1) goto REL;
}

:BNE REL is op4=0xe & cc=0x3 & REL {
    if ($(Z_flag) == 0) goto REL;
}

:BC REL is op4=0xe & cc=0x4 & REL {
    if ($(C_flag) == 1) goto REL;
}

:BNC REL is op4=0xe & cc=0x5 & REL {
    if ($(C_flag) == 0) goto REL;
}

:BN REL is op4=0xe & cc=0x6 & REL {
    if ($(N_flag) == 1) goto REL;
}

:BP REL is op4=0xe & cc=0x7 & REL {
    if ($(N_flag) == 0) goto REL;
}

:BV REL is op4=0xe & cc=0x8 & REL {
    if ($(V_flag) == 1) goto REL;
}

:BNV REL is op4=0xe & cc=0x9 & REL {
    if ($(V_flag) == 0) goto REL;
}

:BLT REL is op4=0xe & cc=0xa & REL {
    if (($(V_flag) ^ $(N_flag)) == 1) goto REL;
}

:BGE REL is op4=0xe & cc=0xb & REL {
    if (($(V_flag) ^ $(N_flag)) == 0) goto REL;
}

:BLE REL is op4=0xe & cc=0xc & REL {
    if ((($(V_flag) ^ $(N_flag)) | $(Z_flag)) == 1) goto REL;
}

:BGT REL is op4=0xe & cc=0xd & REL {
    if ((($(V_flag) ^ $(N_flag)) | $(Z_flag)) == 0) goto REL;
}

:BLS REL is op4=0xe & cc=0xe & REL {
    if (($(C_flag) | $(Z_flag)) == 1) goto REL;
}

:BHI REL is op4=0xe & cc=0xf & REL {
    if (($(C_flag) | $(Z_flag)) == 0) goto REL;
}

:JMP_D @ri is op12=0x9f0 & ri {
    goto [ri];
    delayslot(1);
}

:CALL_D REL_SEXT11 is op5=0x1b & REL_SEXT11 {
    RP = inst_next + 2;
    call REL_SEXT11;
    delayslot(1);
}

:CALL_D @ri is op12=0x9f1 & ri {
    RP = inst_next + 2;
    call [ri];
    delayslot(1);
}

:RET_D is op16=0x9f20 {
    return [RP];
    delayslot(1);
}

:BRA_D REL is op4=0xf & cc=0x0 & REL {
    goto REL;
    delayslot(1);
}

:BNO_D REL is op4=0xf & cc=0x1 & REL {
    delayslot(1);
}

:BEQ_D REL is op4=0xf & cc=0x2 & REL {
    if ($(Z_flag) == 1) goto REL;
    delayslot(1);
}

:BNE_D REL is op4=0xf & cc=0x3 & REL {
    if ($(Z_flag) == 0) goto REL;
    delayslot(1);
}

:BC_D REL is op4=0xf & cc=0x4 & REL {
    if ($(C_flag) == 1) goto REL;
    delayslot(1);
}

:BNC_D REL is op4=0xf & cc=0x5 & REL {
    if ($(C_flag) == 0) goto REL;
    delayslot(1);
}

:BN_D REL is op4=0xf & cc=0x6 & REL {
    if ($(N_flag) == 1) goto REL;
    delayslot(1);
}

:BP_D REL is op4=0xf & cc=0x7 & REL {
    if ($(N_flag) == 0) goto REL;
    delayslot(1);
}

:BV_D REL is op4=0xf & cc=0x8 & REL {
    if ($(V_flag) == 1) goto REL;
    delayslot(1);
}

:BNV_D REL is op4=0xf & cc=0x9 & REL {
    if ($(V_flag) == 0) goto REL;
    delayslot(1);
}

:BLT_D REL is op4=0xf & cc=0xa & REL {
    if (($(V_flag) ^ $(N_flag)) == 1) goto REL;
    delayslot(1);
}

:BGE_D REL is op4=0xf & cc=0xb & REL {
    if (($(V_flag) ^ $(N_flag)) == 0) goto REL;
    delayslot(1);
}

:BLE_D REL is op4=0xf & cc=0xc & REL {
    if ((($(V_flag) ^ $(N_flag)) | $(Z_flag)) == 1) goto REL;
    delayslot(1);
}

:BGT_D REL is op4=0xf & cc=0xd & REL {
    if ((($(V_flag) ^ $(N_flag)) | $(Z_flag)) == 0) goto REL;
    delayslot(1);
}

:BLS_D REL is op4=0xf & cc=0xe & REL {
    if (($(C_flag) | $(Z_flag)) == 1) goto REL;
    delayslot(1);
}

:BHI_D REL is op4=0xf & cc=0xf & REL {
    if (($(C_flag) | $(Z_flag)) == 0) goto REL;
    delayslot(1);
}

# ====

:DMOV @dir8, "AC" is op8=0x08 & dir8 {
    local ext:4 = zext(dir8:1) * 4;
    AC = *:4 ext;
}

:DMOV "AC", @dir8 is op8=0x18 & dir8 {
    local ext:4 = zext(dir8:1) * 4;
    *:4 ext = AC;
}

:DMOV @dir8, @"AC"+ is op8=0x0c & dir8 {
    local ext:4 = zext(dir8:1) * 4;
    *:4 AC = *:4 ext;
    AC = AC + 4;
}

:DMOV "AC"+, @dir8 is op8=0x1c & dir8 {
    local ext:4 = zext(dir8:1) * 4;
    *:4 ext = *:4 AC;
    AC = AC + 4;
}

:DMOV @dir8, @"-SP" is op8=0x0b & dir8 {
    local ext:4 = zext(dir8:1) * 4;
    SP = SP - 4;
    *:4 SP = *:4 ext;
}

:DMOV @"SP+", @dir8 is op8=0x1b & dir8 {
    local ext:4 = zext(dir8:1) * 4;
    *:4 ext = *:4 SP;
    SP = SP + 4;
}

# ====

:DMOVH @dir8, "AC" is op8=0x09 & dir8 {
    local ext:4 = zext(dir8:1) * 2;
    AC = zext(*:2 ext);
}

:DMOVH "AC", @dir8 is op8=0x19 & dir8 {
    local ext:4 = zext(dir8:1) * 2;
    *:2 ext = AC:2;
}

:DMOVH @dir8, @"AC"+ is op8=0x0d & dir8 {
    local ext:4 = zext(dir8:1) * 2;
    *:2 AC = *:2 ext;
    AC = AC + 2;
}

:DMOVH @"AC"+, @dir8 is op8=0x1d & dir8 {
    local ext:4 = zext(dir8:1) * 2;
    *:2 ext = *:2 AC;
    AC = AC + 2;
}

# ====

:DMOVB @dir8, "AC" is op8=0x0a & dir8 {
    local ext:4 = zext(dir8:1);
    AC = zext(*:1 ext);
}

:DMOVB "AC", @dir8 is op8=0x1a & dir8 {
    local ext:4 = zext(dir8:1);
    *:1 ext = AC:1;
}

:DMOVB @dir8, @"AC"+ is op8=0x0e & dir8 {
    local ext:4 = zext(dir8:1);
    *:1 AC = *:1 ext;
    AC = AC + 1;
}

:DMOVB "AC"+, @dir8 is op8=0x1e & dir8 {
    local ext:4 = zext(dir8:1);
    *:1 ext = *:1 AC;
    AC = AC + 1;
}

# ====

:LDRES @ri+, #u4 is op8=0xbc & u4 & ri unimpl
:STRES #u4, @ri+ is op8=0xbd & u4 & ri unimpl

# ====

:COPOP #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9fc & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl
:COPLD #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9fd & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl
:COPST #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9fe & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl
:COPSV #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9ff & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl

# ====

:NOP is op16=0x9fa0 { }

# ====

:ANDCCR #u8 is op8=0x83 & u8 {
    $(CCR) = $(CCR) & u8:1;
}

:ORCCR #u8 is op8=0x93 & u8 {
    $(CCR) = $(CCR) | u8:1;
}

:STILM #u8 is op8=0x87 & u8 {
    $(ILM_flag) = u8:1;
}

:ADDSP #s8 is op8=0xa3 & s8 {
    local ext:4 = sext(s8:1) * 4;
    SP = SP + ext;
}

# ====

:EXTSB ri is op12=0x978 & ri {
    ri = sext(ri:1);
}

:EXTUB ri is op12=0x979 & ri {
    ri = zext(ri:1);
}

:EXTSH ri is op12=0x97a & ri {
    ri = sext(ri:2);
}

:EXTUH ri is op12=0x97b & ri {
    ri = zext(ri:2);
}

# ====

:LDM0 rlist_lo is op8=0x8c & rlist_lo {
    local rl7:1 = rlist_lo:1 & 0b10000000;
    local rl6:1 = rlist_lo:1 & 0b01000000;
    local rl5:1 = rlist_lo:1 & 0b00100000;
    local rl4:1 = rlist_lo:1 & 0b00010000;
    local rl3:1 = rlist_lo:1 & 0b00001000;
    local rl2:1 = rlist_lo:1 & 0b00000100;
    local rl1:1 = rlist_lo:1 & 0b00000010;
    local rl0:1 = rlist_lo:1 & 0b00000001;

    if (rl0 == 0) goto <RL0>;
        R0 = *:4 SP;
        SP = SP + 4;
    <RL0>
    if (rl1 == 0) goto <RL1>;
        R1 = *:4 SP;
        SP = SP + 4;
    <RL1>
    if (rl2 == 0) goto <RL2>;
        R2 = *:4 SP;
        SP = SP + 4;
    <RL2>
    if (rl3 == 0) goto <RL3>;
        R3 = *:4 SP;
        SP = SP + 4;
    <RL3>
    if (rl4 == 0) goto <RL4>;
        R4 = *:4 SP;
        SP = SP + 4;
    <RL4>
    if (rl5 == 0) goto <RL5>;
        R5 = *:4 SP;
        SP = SP + 4;
    <RL5>
    if (rl6 == 0) goto <RL6>;
        R6 = *:4 SP;
        SP = SP + 4;
    <RL6>
    if (rl7 == 0) goto <RL7>;
        R7 = *:4 SP;
        SP = SP + 4;
    <RL7>
}

:LDM1 rlist_hi is op8=0x8d & rlist_hi {
    local rl15:1 = rlist_hi:1 & 0b10000000;
    local rl14:1 = rlist_hi:1 & 0b01000000;
    local rl13:1 = rlist_hi:1 & 0b00100000;
    local rl12:1 = rlist_hi:1 & 0b00010000;
    local rl11:1 = rlist_hi:1 & 0b00001000;
    local rl10:1 = rlist_hi:1 & 0b00000100;
    local rl9:1 = rlist_hi:1 & 0b00000010;
    local rl8:1 = rlist_hi:1 & 0b00000001;

    if (rl8 == 0) goto <RL8>;
        R8 = *:4 SP;
        SP = SP + 4;
    <RL8>
    if (rl9 == 0) goto <RL9>;
        R9 = *:4 SP;
        SP = SP + 4;
    <RL9>
    if (rl10 == 0) goto <RL10>;
        R10 = *:4 SP;
        SP = SP + 4;
    <RL10>
    if (rl11 == 0) goto <RL11>;
        R11 = *:4 SP;
        SP = SP + 4;
    <RL11>
    if (rl12 == 0) goto <RL12>;
        R12 = *:4 SP;
        SP = SP + 4;
    <RL12>
    if (rl13 == 0) goto <RL13>;
        AC = *:4 SP;
        SP = SP + 4;
    <RL13>
    if (rl14 == 0) goto <RL14>;
        FP = *:4 SP;
        SP = SP + 4;
    <RL14>
    if (rl15 == 0) goto <RL15>;
        SP = *:4 SP;
        SP = SP + 4;
    <RL15>
}

# ====

:STM0 rlist_lo is op8=0x8e & rlist_lo {
    local rl7:1 = rlist_lo:1 & 0b10000000;
    local rl6:1 = rlist_lo:1 & 0b01000000;
    local rl5:1 = rlist_lo:1 & 0b00100000;
    local rl4:1 = rlist_lo:1 & 0b00010000;
    local rl3:1 = rlist_lo:1 & 0b00001000;
    local rl2:1 = rlist_lo:1 & 0b00000100;
    local rl1:1 = rlist_lo:1 & 0b00000010;
    local rl0:1 = rlist_lo:1 & 0b00000001;

    if (rl0 == 0) goto <RL0>;
        SP = SP - 4;
        *:4 SP = R0;
    <RL0>
    if (rl1 == 0) goto <RL1>;
        SP = SP - 4;
        *:4 SP = R1;
    <RL1>
    if (rl2 == 0) goto <RL2>;
        SP = SP - 4;
        *:4 SP = R2;
    <RL2>
    if (rl3 == 0) goto <RL3>;
        SP = SP - 4;
        *:4 SP = R3;
    <RL3>
    if (rl4 == 0) goto <RL4>;
        SP = SP - 4;
        *:4 SP = R4;
    <RL4>
    if (rl5 == 0) goto <RL5>;
        SP = SP - 4;
        *:4 SP = R5;
    <RL5>
    if (rl6 == 0) goto <RL6>;
        SP = SP - 4;
        *:4 SP = R6;
    <RL6>
    if (rl7 == 0) goto <RL7>;
        SP = SP - 4;
        *:4 SP = R7;
    <RL7>
}

:STM1 rlist_hi is op8=0x8f & rlist_hi {
    local rl15:1 = rlist_hi:1 & 0b10000000;
    local rl14:1 = rlist_hi:1 & 0b01000000;
    local rl13:1 = rlist_hi:1 & 0b00100000;
    local rl12:1 = rlist_hi:1 & 0b00010000;
    local rl11:1 = rlist_hi:1 & 0b00001000;
    local rl10:1 = rlist_hi:1 & 0b00000100;
    local rl9:1 = rlist_hi:1 & 0b00000010;
    local rl8:1 = rlist_hi:1 & 0b00000001;

    if (rl8 == 0) goto <RL8>;
        SP = SP - 4;
        *:4 SP = R8;
    <RL8>
    if (rl9 == 0) goto <RL9>;
        SP = SP - 4;
        *:4 SP = R9;
    <RL9>
    if (rl10 == 0) goto <RL10>;
        SP = SP - 4;
        *:4 SP = R10;
    <RL10>
    if (rl11 == 0) goto <RL11>;
        SP = SP - 4;
        *:4 SP = R11;
    <RL11>
    if (rl12 == 0) goto <RL12>;
        SP = SP - 4;
        *:4 SP = R12;
    <RL12>
    if (rl13 == 0) goto <RL13>;
        SP = SP - 4;
        *:4 SP = AC;
    <RL13>
    if (rl14 == 0) goto <RL14>;
        SP = SP - 4;
        *:4 SP = FP;
    <RL14>
    if (rl15 == 0) goto <RL15>;
        SP = SP - 4;
        *:4 SP = SP;
    <RL15>
}

# ====

:ENTER #u8 is op8=0x0f & u8 {
    local pointer:4 = SP - 4;
    *:4 pointer = FP;
    FP = SP - 4;
    local ext:4 = zext(u8:1) * 4;
    SP = SP - ext;
}

:LEAVE is op16=0x9f90 {
    local pointer:4 = SP - 4;
    SP = FP + 4;
    FP = *:4 pointer;
}

# ====

:XCHB @rj, ri is op8=0x8a & rj & ri {
    local temp:1 = ri:1;
    ri = zext(*:1 rj);
    *:1 rj = temp;
}