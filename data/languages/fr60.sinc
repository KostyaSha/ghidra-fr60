
define token instr (16)
    op16     = (0,15)
    op12     = (4,15)
    op8      = (8,15)
    op5      = (11,15)
    op4      = (12,15)

    cc       = (8,11)
    i8       = (4,11)
    o8       = (4,11) signed
    u4       = (4,7)
    i4       = (4,7)
    rj       = (4,7)
    rs4_4    = (4,7)

    rel11    = (0,10) signed
    u8       = (0,7)
    s8       = (0,7) signed
    rel8     = (0,7) signed
    dir8     = (0,7)
    stmrlist7 = (0,0)
    stmrlist6 = (1,1)
    stmrlist5 = (2,2)
    stmrlist4 = (3,3)
    stmrlist3 = (4,4)
    stmrlist2 = (5,5)
    stmrlist1 = (6,6)
    stmrlist0 = (7,7)
    stmrlist7N = (0,0)
    stmrlist6N = (0,1)
    stmrlist5N = (0,2)
    stmrlist4N = (0,3)
    stmrlist3N = (0,4)
    stmrlist2N = (0,5)
    stmrlist1N = (0,6)
    ldmrlist0 = (0,0)
    ldmrlist1 = (1,1)
    ldmrlist2 = (2,2)
    ldmrlist3 = (3,3)
    ldmrlist4 = (4,4)
    ldmrlist5 = (5,5)
    ldmrlist6 = (6,6)
    ldmrlist7 = (7,7)
    ldmrlist1N = (1,7)
    ldmrlist2N = (2,7)
    ldmrlist3N = (3,7)
    ldmrlist4N = (4,7)
    ldmrlist5N = (5,7)
    ldmrlist6N = (6,7)
    ldmrlist7N = (7,7)

    ri       = (0,3)
    rs       = (0,3)
;

define token instr48 (48)
    op48_12  = (36,47)
    ri48_4   = (32,35)
    i32      = (0,31)
;

define token instr32 (32)
    op32_8   = (24,31)
    i20_4h   = (20,23)
    ri32_4   = (16,19)
    i20_16l  = (0,15)

    op32_12  = (20,31)
    u32_4    = (16,19)
    cc32_6   = (10,15)
    cc32_2   = (8,9)
    crj32_4  = (4,7)
    cri32_4  = (0,3)
;

attach variables [ ri rj ri48_4 ri32_4 ] [ R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 AC FP SP ];
attach variables [ rs rs4_4 ] [ TBR RP SSP USP MDH MDL _ _ _ _ _ _ _ _ _ _ ];
attach names [ cc32_2 ] [ ADD SUB MUL DIV ];

# ====

macro resultFlags(result) {
    N = (result s< 0);
    Z = (result == 0);
}

macro addFlags(result, val1, val2) {
    resultFlags(result);
    V = scarry(val1, val2);
    C = carry(val1, val2);
}

macro subFlags(result, val1, val2) {
    resultFlags(result);
    V = sborrow(val1, val2);
    C = (val1 < val2);
}

macro mulFlags64(val1, val2) {
    N = (MDL s< 0);
    Z = (MD == 0);
    V = (val1 != 0 && (val1 > (0xFFFFFFFFFFFFFFFF / val2)));
}

macro loadCCR() {
    S   = (PS & 0b00100000) != 0;
    I   = (PS & 0b00010000) != 0;
    N   = (PS & 0b00001000) != 0;
    Z   = (PS & 0b00000100) != 0;
    V   = (PS & 0b00000010) != 0;
    C   = (PS & 0b00000001) != 0;
}

macro loadProgramStatus() {
    local ilm_sft:4 = (PS & 0b11110000000000000000) >> 16;
    ILM = ilm_sft:1;
    D1  = (PS & 0b0000010000000000) != 0;
    D0  = (PS & 0b0000001000000000) != 0;
    T   = (PS & 0b0000000100000000) != 0;
    loadCCR();
}

# ====

define pcodeop _interrupt_prelude;
define pcodeop dma_write_chan;
define pcodeop dma_read_chan;

# ====

# 4 bit immediates don't convert cleanly with zext/sext unless they are 1 byte in size
signedi_4: i4 is i4 {
    local res:4 = 0;
    # if 4bit number is neg
    if (0b00001000 & i4:1) goto <NEG>;
    res = zext(i4:1);
<NEG>
    res = sext(i4:1 | 0xF0);

    export res;
}

usignedi_4: i4 is i4 {
    local ext:4 = zext(i4:1);
    export ext;
}

bandl_ext: u4 is u4 {
    local value:1 = 0xf0 | u4;
    export value;
}

bandh_ext: u4 is u4 {
    local value:1 = 0x0f | (u4 << 4);
    export value;
}

REL: reloc is rel8 [ reloc = inst_next + (rel8 * 2); ] {
    export *:2 reloc;
}

REL_SEXT11: reloc is rel11 [ reloc = inst_next + (rel11 * 2); ] {
    export *:2 reloc;
}

LDI_20_CON: comb is i20_4h & i20_16l [ comb = (i20_4h << 16) + i20_16l; ] {
    local result:4 = zext(comb:3);
    export result;
}

DIR8_REL: reloc is dir8 [ reloc = dir8 * 4; ] {
    export *:4 reloc;
}

DIR8H_REL: reloc is dir8 [ reloc = dir8 * 2; ] {
    export *:2 reloc;
}

DIR8B_REL: reloc is dir8 [ reloc = dir8 * 1; ] {
    export *:1 reloc;
}

# If "R15" is specified in the parameter "stmrlist", the contents of "R15"
# retained before the instruction is executed will be written to memory
stm_r15:   SP          is SP & stmrlist7=1                          {              SP = SP - 4; *[ram]:4 SP = SP + 4; }
stm_r15:   ""          is epsilon                                   {                                                 }

stm_r14:   FP          is FP & stm_r15 & stmrlist6=1 & stmrlist7N=0  { build stm_r15; SP = SP - 4; *[ram]:4 SP = FP;  }
stm_r14:   FP,stm_r15  is FP & stm_r15 & stmrlist6=1                 { build stm_r15; SP = SP - 4; *[ram]:4 SP = FP;  }
stm_r14:   stm_r15     is stm_r15                                    { build stm_r15;                                 }

stm_r13:   AC          is AC & stm_r14 & stmrlist5=1 & stmrlist6N=0  { build stm_r14; SP = SP - 4; *[ram]:4 SP = AC;  }
stm_r13:   AC,stm_r14  is AC & stm_r14 & stmrlist5=1                 { build stm_r14; SP = SP - 4; *[ram]:4 SP = AC;  }
stm_r13:   stm_r14     is stm_r14                                    { build stm_r14;                                 }

stm_r12:   R12         is R12 & stm_r13 & stmrlist4=1 & stmrlist5N=0 { build stm_r13; SP = SP - 4; *[ram]:4 SP = R12; }
stm_r12:   R12,stm_r13 is R12 & stm_r13 & stmrlist4=1                { build stm_r13; SP = SP - 4; *[ram]:4 SP = R12; }
stm_r12:   stm_r13     is stm_r13                                    { build stm_r13;                                 }

stm_r11:   R11         is R11 & stm_r12 & stmrlist3=1 & stmrlist4N=0 { build stm_r12; SP = SP - 4; *[ram]:4 SP = R11; }
stm_r11:   R11,stm_r12 is R11 & stm_r12 & stmrlist3=1                { build stm_r12; SP = SP - 4; *[ram]:4 SP = R11; }
stm_r11:   stm_r12     is stm_r12                                    { build stm_r12;                                 }

stm_r10:   R10         is R10 & stm_r11 & stmrlist2=1 & stmrlist3N=0 { build stm_r11; SP = SP - 4; *[ram]:4 SP = R10; }
stm_r10:   R10,stm_r11 is R10 & stm_r11 & stmrlist2=1                { build stm_r11; SP = SP - 4; *[ram]:4 SP = R10; }
stm_r10:   stm_r11     is stm_r11                                    { build stm_r11;                                 }

stm_r9:    R9          is R9 & stm_r10 & stmrlist1=1 & stmrlist2N=0  { build stm_r10; SP = SP - 4; *[ram]:4 SP = R9;  }
stm_r9:    R9,stm_r10  is R9 & stm_r10 & stmrlist1=1                 { build stm_r10; SP = SP - 4; *[ram]:4 SP = R9;  }
stm_r9:    stm_r10     is stm_r10                                    { build stm_r10;                                 }

stm1_list: R8          is R8 & stm_r9 & stmrlist0=1 & stmrlist1N=0   { build stm_r9; SP = SP - 4; *[ram]:4 SP = R8;   }
stm1_list: R8,stm_r9   is R8 & stm_r9 & stmrlist0=1                  { build stm_r9; SP = SP - 4; *[ram]:4 SP = R8;   }
stm1_list: stm_r9      is stm_r9                                     { build stm_r9;                                  }


stm_r7:    R7          is R7 & stmrlist7=1                         {                SP = SP - 4; *[ram]:4 SP = R7; }
stm_r7:    ""          is epsilon                                  {                                               }

stm_r6:    R6          is R6 & stm_r7 & stmrlist6=1 & stmrlist7N=0 { build stm_r7; SP = SP - 4; *[ram]:4 SP = R6;  }
stm_r6:    R6,stm_r7   is R6 & stm_r7 & stmrlist6=1                { build stm_r7; SP = SP - 4; *[ram]:4 SP = R6;  }
stm_r6:    stm_r7      is stm_r7                                   { build stm_r7;                                 }

stm_r5:    R5          is R5 & stm_r6 & stmrlist5=1 & stmrlist6N=0 { build stm_r6; SP = SP - 4; *[ram]:4 SP = R5;  }
stm_r5:    R5,stm_r6  is R5 & stm_r6 & stmrlist5=1                 { build stm_r6; SP = SP - 4; *[ram]:4 SP = R5;  }
stm_r5:    stm_r6     is stm_r6                                    { build stm_r6;                                 }

stm_r4:    R4         is R4 & stm_r5 & stmrlist4=1 & stmrlist5N=0  { build stm_r5; SP = SP - 4; *[ram]:4 SP = R4;  }
stm_r4:    R4,stm_r5  is R4 & stm_r5 & stmrlist4=1                 { build stm_r5; SP = SP - 4; *[ram]:4 SP = R4;  }
stm_r4:    stm_r5     is stm_r5                                    { build stm_r5;                                 }

stm_r3:    R3         is R3 & stm_r4 & stmrlist3=1 & stmrlist4N=0  { build stm_r4; SP = SP - 4; *[ram]:4 SP = R3;  }
stm_r3:    R3,stm_r4  is R3 & stm_r4 & stmrlist3=1                 { build stm_r4; SP = SP - 4; *[ram]:4 SP = R3;  }
stm_r3:    stm_r4     is stm_r4                                    { build stm_r4;                                 }

stm_r2:    R2         is R2 & stm_r3 & stmrlist2=1 & stmrlist3N=0  { build stm_r3; SP = SP - 4; *[ram]:4 SP = R2;  }
stm_r2:    R2,stm_r3  is R2 & stm_r3 & stmrlist2=1                 { build stm_r3; SP = SP - 4; *[ram]:4 SP = R2;  }
stm_r2:    stm_r3     is stm_r3                                    { build stm_r3;                                 }

stm_r1:    R1          is R1 & stm_r2 & stmrlist1=1 & stmrlist2N=0 { build stm_r2;  SP = SP - 4; *[ram]:4 SP = R1; }
stm_r1:    R1,stm_r2   is R1 & stm_r2 & stmrlist1=1                { build stm_r2;  SP = SP - 4; *[ram]:4 SP = R1; }
stm_r1:    stm_r2      is stm_r2                                   { build stm_r2;                                 }

stm0_list: R0          is R0 & stm_r1 & stmrlist0=1 & stmrlist1N=0 { build stm_r1; SP = SP - 4; *[ram]:4 SP = R0;  }
stm0_list: R0,stm_r1   is R0 & stm_r1 & stmrlist0=1                { build stm_r1; SP = SP - 4; *[ram]:4 SP = R0;  }
stm0_list: stm_r1      is stm_r1                                   { build stm_r1;                                 }

# If "R15" is specified in the parameter "stmrlist", the final contents of "R15"
# will be readfrom memory
ldm_r15:   SP          is SP & ldmrlist7=1                           { SP = *[ram]:4 SP;                             }
ldm_r15:   ""          is epsilon                                    {                                               }

ldm_r14:   FP          is FP & ldm_r15 & ldmrlist6=1 & ldmrlist7N=0  { FP = *[ram]:4 SP; SP = SP + 4; build ldm_r15; }
ldm_r14:   FP,ldm_r15  is FP & ldm_r15 & ldmrlist6=1                 { FP = *[ram]:4 SP; SP = SP + 4; build ldm_r15; }
ldm_r14:   ldm_r15     is ldm_r15                                    {                                build ldm_r15; }

ldm_r13:   AC          is AC & ldm_r14 & ldmrlist5=1 & ldmrlist6N=0  { AC = *[ram]:4 SP; SP = SP + 4; build ldm_r14; }
ldm_r13:   AC,ldm_r14  is AC & ldm_r14 & ldmrlist5=1                 { AC = *[ram]:4 SP; SP = SP + 4; build ldm_r14; }
ldm_r13:   ldm_r14     is ldm_r14                                    {                                build ldm_r14; }

ldm_r12:   R12         is R12 & ldm_r13 & ldmrlist4=1 & ldmrlist5N=0 { R12 = *[ram]:4 SP; SP = SP + 4; build ldm_r13; }
ldm_r12:   R12,ldm_r13 is R12 & ldm_r13 & ldmrlist4=1                { R12 = *[ram]:4 SP; SP = SP + 4; build ldm_r13; }
ldm_r12:   ldm_r13     is ldm_r13                                    {                                 build ldm_r13; }

ldm_r11:   R11         is R11 & ldm_r12 & ldmrlist3=1 & ldmrlist4N=0 { R11 = *[ram]:4 SP; SP = SP + 4; build ldm_r12; }
ldm_r11:   R11,ldm_r12 is R11 & ldm_r12 & ldmrlist3=1                { R11 = *[ram]:4 SP; SP = SP + 4; build ldm_r12; }
ldm_r11:   ldm_r12     is ldm_r12                                    {                                 build ldm_r12; }

ldm_r10:   R10         is R10 & ldm_r11 & ldmrlist2=1 & ldmrlist3N=0 { R10 = *[ram]:4 SP; SP = SP + 4; build ldm_r11; }
ldm_r10:   R10,ldm_r11 is R10 & ldm_r11 & ldmrlist2=1                { R10 = *[ram]:4 SP; SP = SP + 4; build ldm_r11; }
ldm_r10:   ldm_r11     is ldm_r11                                    {                                 build ldm_r11; }

ldm_r9:    R9          is R9 & ldm_r10 & ldmrlist1=1 & ldmrlist2N=0{ R9 = *[ram]:4 SP;  SP = SP + 4; build ldm_r10; }
ldm_r9:    R9,ldm_r10  is R9 & ldm_r10 & ldmrlist1=1               { R9 = *[ram]:4 SP;  SP = SP + 4; build ldm_r10; }
ldm_r9:    ldm_r10     is ldm_r10                                  {                                 build ldm_r10; }

ldm1_list: R8          is R8 & ldm_r9 & ldmrlist0=1 & ldmrlist1N=0 { R8 = *[ram]:4 SP;   SP = SP + 4; build ldm_r9; }
ldm1_list: R8,ldm_r9   is R8 & ldm_r9 & ldmrlist0=1                { R8 = *[ram]:4 SP;   SP = SP + 4; build ldm_r9; }
ldm1_list: ldm_r9      is ldm_r9                                   {                                  build ldm_r9; }


ldm_r7:    R7          is R7 & ldmrlist7=1                         { R7 = *[ram]:4 SP; SP = SP + 4;                }
ldm_r7:    ""          is epsilon                                  {                                               }

ldm_r6:    R6          is R6 & ldm_r7 & ldmrlist6=1 & ldmrlist7N=0 { R6 = *[ram]:4 SP;  SP = SP + 4; build ldm_r7; }
ldm_r6:    R6,ldm_r7   is R6 & ldm_r7 & ldmrlist6=1                { R6 = *[ram]:4 SP;  SP = SP + 4; build ldm_r7; }
ldm_r6:    ldm_r7      is ldm_r7                                   {                                 build ldm_r7; }

ldm_r5:    R5          is R5 & ldm_r6 & ldmrlist5=1 & ldmrlist6N=0 { R5 = *[ram]:4 SP;  SP = SP + 4; build ldm_r6; }
ldm_r5:    R5,ldm_r6   is R5 & ldm_r6 & ldmrlist5=1                { R5 = *[ram]:4 SP;  SP = SP + 4; build ldm_r6; }
ldm_r5:    ldm_r6      is ldm_r6                                   {                                 build ldm_r6; }

ldm_r4:    R4          is R4 & ldm_r5 & ldmrlist4=1 & ldmrlist5N=0 { R4 = *[ram]:4 SP;  SP = SP + 4; build ldm_r5; }
ldm_r4:    R4,ldm_r5   is R4 & ldm_r5 & ldmrlist4=1                { R4 = *[ram]:4 SP;  SP = SP + 4; build ldm_r5; }
ldm_r4:    ldm_r5      is ldm_r5                                   {                                 build ldm_r5; }

ldm_r3:    R3          is R3 & ldm_r4 & ldmrlist3=1 & ldmrlist4N=0 { R3 = *[ram]:4 SP;  SP = SP + 4; build ldm_r4; }
ldm_r3:    R3,ldm_r4   is R3 & ldm_r4 & ldmrlist3=1                { R3 = *[ram]:4 SP;  SP = SP + 4; build ldm_r4; }
ldm_r3:    ldm_r4      is ldm_r4                                   {                                 build ldm_r4; }

ldm_r2:    R2          is R2 & ldm_r3 & ldmrlist2=1 & ldmrlist3N=0 { R2 = *[ram]:4 SP;  SP = SP + 4; build ldm_r3; }
ldm_r2:    R2,ldm_r3   is R2 & ldm_r3 & ldmrlist2=1                { R2 = *[ram]:4 SP;  SP = SP + 4; build ldm_r3; }
ldm_r2:    ldm_r3      is ldm_r3                                   {                                 build ldm_r3; }

ldm_r1:    R1          is R1 & ldm_r2 & ldmrlist1=1 & ldmrlist2N=0 {  R1 = *[ram]:4 SP; SP = SP + 4; build ldm_r2; }
ldm_r1:    R1,ldm_r2   is R1 & ldm_r2 & ldmrlist1=1                {  R1 = *[ram]:4 SP; SP = SP + 4; build ldm_r2; }
ldm_r1:    ldm_r2      is ldm_r2                                   {                                 build ldm_r2; }

ldm0_list: R0          is R0 & ldm_r1 & ldmrlist0=1 & ldmrlist1N=0 { R0 = *[ram]:4 SP;  SP = SP + 4; build ldm_r1; }
ldm0_list: R0,ldm_r1   is R0 & ldm_r1 & ldmrlist0=1                { R0 = *[ram]:4 SP;  SP = SP + 4; build ldm_r1; }
ldm0_list: ldm_r1      is ldm_r1                                   {                                 build ldm_r1; }


CC: "RA" is cc=0x0 { local tmp:1 = 1; export *[const]:1 tmp; }
CC: "NO" is cc=0x1 { local tmp:1 = 0; export *[const]:1 tmp; }
CC: "EQ" is cc=0x2 { local tmp:1 = (Z == 1); export *[const]:1 tmp; }
CC: "NE" is cc=0x3 { local tmp:1 = (Z == 0); export *[const]:1 tmp; }
CC: "C"  is cc=0x4 { local tmp:1 = (C == 1); export *[const]:1 tmp; }
CC: "NC" is cc=0x5 { local tmp:1 = (C == 0); export *[const]:1 tmp; }
CC: "N"  is cc=0x6 { local tmp:1 = (N == 1); export *[const]:1 tmp; }
CC: "P"  is cc=0x7 { local tmp:1 = (N == 0); export *[const]:1 tmp; }
CC: "V"  is cc=0x8 { local tmp:1 = (V == 1); export *[const]:1 tmp; }
CC: "NV" is cc=0x9 { local tmp:1 = (V == 0); export *[const]:1 tmp; }
CC: "LT" is cc=0xA { local tmp:1 = ((V ^ N) == 1); export *[const]:1 tmp; }
CC: "GE" is cc=0xB { local tmp:1 = ((V ^ N) == 0); export *[const]:1 tmp; }
CC: "LE" is cc=0xC { local tmp:1 = (((V ^ N) | Z) == 1); export *[const]:1 tmp; }
CC: "GT" is cc=0xD { local tmp:1 = (((V ^ N) | Z) == 0); export *[const]:1 tmp; }
CC: "LS" is cc=0xE { local tmp:1 = ((C | Z) == 1); export *[const]:1 tmp; }
CC: "HI" is cc=0xF { local tmp:1 = ((C | Z) == 0); export *[const]:1 tmp; }


# ====

:ADD rj, ri is op8=0xa6 & rj & ri {
    local res:4 = ri + rj;
    addFlags(res, ri, rj);
    ri = res;
}

:ADD #usignedi_4, ri is op8=0xa4 & usignedi_4 & ri {
    local res:4 = ri + usignedi_4;
    addFlags(res, ri, usignedi_4);
    ri = res;
}

:ADD2 #signedi_4, ri is op8=0xa5 & signedi_4 & ri {
    local res:4 = ri + signedi_4;
    addFlags(res, ri, signedi_4);
    ri = res;
}

:ADDC rj, ri is op8=0xa7 & rj & ri {
    local res:4 = ri + rj + zext(C:1);
    addFlags(res, ri, (rj + zext(C:1)));
    ri = res;
}

:ADDN rj, ri is op8=0xa2 & rj & ri {
    ri = ri + rj;
}

:ADDN #usignedi_4, ri is op8=0xa0 & usignedi_4 & ri {
    ri = ri + usignedi_4;
}

:ADDN2 #signedi_4, ri is op8=0xa1 & signedi_4 & ri {
    ri = ri + signedi_4;
}

# ====

:SUB rj, ri is op8=0xac & rj & ri {
    local res:4 = ri - rj;
    subFlags(res, ri, rj);
    ri = res;
}

:SUBC rj, ri is op8=0xad & rj & ri {
    local res:4 = ri - rj - zext(C);
    subFlags(res, ri, (rj - zext(C)));
    ri = res;
}

:SUBN rj, ri is op8=0xae & rj & ri {
    ri = ri - rj;
}

# ====

:CMP rj, ri is op8=0xaa & rj & ri {
    local res:4 = ri - rj;
    subFlags(res, ri, rj);
}

:CMP usignedi_4, ri is op8=0xa8 & usignedi_4 & ri {
    local res:4 = ri - usignedi_4;
    subFlags(res, ri, usignedi_4);
}

:CMP2 signedi_4, ri is op8=0xa9 & signedi_4 & ri {
    res:4 = ri - signedi_4;
    subFlags(res, ri, signedi_4);
}

# ====

:AND rj, ri is op8=0x82 & rj & ri {
    ri = ri & rj;
    resultFlags(ri);
}

:AND rj, @ri is op8=0x84 & rj & ri {
    *:4 ri = *:4 ri & rj;
    resultFlags(*:4 ri);
}

:ANDH rj, @ri is op8=0x85 & rj & ri {
    *:2 ri = *:2 ri & rj:2;
    resultFlags(*:2 ri);
}

:ANDB rj, @ri is op8=0x86 & rj & ri {
    *:1 ri = *:1 ri & rj:1;
    resultFlags(*:1 ri);
}

# ====

:OR rj, ri is op8=0x92 & rj & ri {
    ri = ri | rj;
    resultFlags(ri);
}

:OR rj, @ri is op8=0x94 & rj & ri {
    *:4 ri = *:4 ri | rj;
    resultFlags(*:4 ri);
}

:ORH rj, @ri is op8=0x95 & rj & ri {
    *:2 ri = *:2 ri | rj:2;
    resultFlags(*:2 ri);
}

:ORB rj, @ri is op8=0x96 & rj & ri {
    *:1 ri = *:1 ri | rj:1;
    resultFlags(*:1 ri);
}

# ====

:EOR rj, ri is op8=0x9a & rj & ri {
    ri = ri ^ rj;
    resultFlags(ri);
}

:EOR rj, @ri is op8=0x9c & rj & ri {
    *:4 ri = *:4 ri ^ rj;
    resultFlags(*:4 ri);
}

:EORH rj, @ri is op8=0x9d & rj & ri {
    *:2 ri = *:2 ri ^ rj:2;
    resultFlags(*:2 ri);
}

:EORB rj, @ri is op8=0x9e & rj & ri {
    *:1 ri = *:1 ri ^ rj:1;
    resultFlags(*:1 ri);
}

# ====

:BANDL #bandl_ext, @ri is op8=0x80 & bandl_ext & ri {
    *:1 ri = bandl_ext & *:1 ri;
}

:BANDH #bandh_ext, @ri is op8=0x81 & bandh_ext & ri {
    *:1 ri = bandh_ext & *:1 ri;
}

# ====

:BORL #u4, @ri is op8=0x90 & u4 & ri {
    *:1 ri = u4:1 | *:1 ri;
}

:BORH #u4, @ri is op8=0x91 & u4 & ri {
    *:1 ri = (u4:1 << 4) | *:1 ri;
}

# ====

:BEORL #u4, @ri is op8=0x98 & u4 & ri {
    *:1 ri = u4:1 ^ *:1 ri;
}

:BEORH #u4, @ri is op8=0x99 & u4 & ri {
    *:1 ri = (u4:1 << 4) ^ *:1 ri;
}

# ====

:BTSTL #u4, @ri is op8=0x88 & u4 & ri {
    local res:1 = u4:1 & *:1 ri;
    # lower 4 bits stored directly to CCR regs
    resultFlags(res);
}

:BTSTH #u4, @ri is op8=0x89 & u4 & ri {
    local res:1 = (u4:1 << 4) & *:1 ri;
    # upper 4 bits stored directly to CCR regs
    resultFlags(res);
}

# ====

:MUL rj, ri is op8=0xaf & rj & ri {
    local full:8 = sext(rj) * sext(ri);
    MDL = full:4;
    MDH = full(4);
    mulFlags64(rj, ri);
}

:MULU rj, ri is op8=0xab & rj & ri {
    local full:8 = zext(rj) * zext(ri);
    MDL = full:4;
    MDH = full(4);
    mulFlags64(rj, ri);
}

:MULH rj, ri is op8=0xbf & rj & ri {
    MDL = sext(rj:2) * sext(ri:2);
    resultFlags(MDL);
}

:MULUH rj, ri is op8=0xbb & rj & ri {
    MDL = zext(rj:2) * zext(ri:2);
    resultFlags(MDL);
}

# ====

:DIV0S ri is op12=0x974 & ri {
    D0 = MDL s< 0;
    D1 = D0 && (ri s< 0);
    local ext64:8 = sext(MDL);
    MDL = ext64:4;
    MDH = ext64(4);
}

:DIV0U ri is op12=0x975 & ri {
    D0 = 0;
    D1 = 0;
    MDH = 0x00000000;
}

:DIV1 ri is op12=0x976 & ri {
    MD = MD << 1;

    local temp:4 = 0;
    if (D1 == 0) goto <D1_ZERO_OP>;
        temp = MDH + ri;
        C = carry(MDH, ri);
        goto <D1_OP>;
    <D1_ZERO_OP>
        temp = MDH - ri;
        C = MDH < ri;
    <D1_OP>

    if (D0 ^ D1 ^ C != 0) goto <END>;
        MDH = temp;
        MDL = MDL | 0x1;
    <END>

    $(Z_flag) = MDH == 0;
}

:DIV2 ri is op12=0x977 & ri {
    if (D1 == 0) goto <D1_ZERO_OP2>;
        C = carry(MDH, ri);
        Z = (MDH + ri) == 0;
        goto <D1_OP2>;
    <D1_ZERO_OP2>
        C = MDH < ri;
        Z = (MDH - ri) == 0;
    <D1_OP2>

    if (Z != 1) goto <END>;
        MDH = 0x00000000;
    <END>
    Z = MDH == 0;
}

:DIV3 is op16=0x9f60 & ri {
    if (Z != 1) goto <END>;
        MDL = MDL + 0x1;
    <END>
}

:DIV4S is op16=0x9f70 & ri {
    if (D1 != 1) goto <END>;
        MDL = 0 - MDL;
    <END>
}

# ====

:LSL rj, ri is op8=0xb6 & rj & ri {
    local shiftAmount = rj & 0x1f;
    ri = ri << shiftAmount;

    C = ((ri << shiftAmount -1) & 0x80000000) != 0;
    resultFlags(ri);
}

:LSL #usignedi_4, ri is op8=0xb4 & usignedi_4 & ri {
    local shiftAmount = usignedi_4;
    ri = ri << shiftAmount;

    C = ((ri << shiftAmount -1) & 0x80000000) != 0;
    resultFlags(ri);
}

:LSL2 #i4_imm, ri is op8=0xb5 & i4 & ri [ i4_imm = i4 + 16; ] {
    ri = ri << i4_imm;
    C = ((ri << i4_imm -1) & 0x80000000) != 0;
    resultFlags(ri);
}

# ====

:LSR rj, ri is op8=0xb2 & rj & ri {
    local shiftAmount = rj & 0x1f;
    ri = ri >> shiftAmount;

    C = ((ri >> shiftAmount -1) & 0x1) != 0;
    resultFlags(ri);
}

:LSR #usignedi_4, ri is op8=0xb0 & usignedi_4 & ri {
    local shiftAmount = usignedi_4;
    ri = ri >> shiftAmount;

    C = ((ri >> shiftAmount -1) & 0x1) != 0;
    resultFlags(ri);
}

:LSR2 #i4_imm, ri is op8=0xb1 & i4 & ri [ i4_imm = i4 + 16; ] {
    ri = ri >> i4_imm;
    C = ((ri >> i4_imm -1) & 0x1) != 0;
    resultFlags(ri);
}

# ====

:ASR rj, ri is op8=0xba & rj & ri {
    local shiftAmount = rj & 0x1f;
    ri = ri s>> shiftAmount;

    C = ((ri s>> shiftAmount -1) & 0x1) != 0;
    resultFlags(ri);
}

:ASR #usignedi_4, ri is op8=0xb8 & usignedi_4 & ri {
    local shiftAmount = usignedi_4;
    ri = ri s>> shiftAmount;

    C = ((ri s>> shiftAmount -1) & 0x1) != 0;
    resultFlags(ri);
}

:ASR2 #i4_imm, ri is op8=0xb9 & i4 & ri [ i4_imm = i4 + 16; ] {
    ri = ri >> i4_imm;
    C = ((ri >> i4_imm -1) & 0x1) != 0;
    resultFlags(ri);
}

# ====

:LDI^":32" #i32, ri48_4 is op48_12=0x9f8 & i32 & ri48_4 {
    ri48_4 = i32;
}

:LDI^":20" #LDI_20_CON, ri32_4 is op32_8=0x9b & LDI_20_CON & ri32_4 {
    ri32_4 = LDI_20_CON;
}

:LDI^":8" #i8, ri is op4=0xc & i8 & ri {
    ri = zext(i8:1);
}

# ====

:LD @rj, ri is op8=0x04 & rj & ri {
    ri = *:4 rj;
}

:LD @(AC, rj), ri is op8=0x00 & rj & ri & AC {
    ri = *:4 (AC + rj);
}

:LD @(FP, o8_imm), ri is op4=0x2 & o8 & ri & FP [ o8_imm = o8 * 4; ]{
    ri = *:4 (FP + o8_imm);
}

:LD @(SP, i4_imm), ri is op8=0x03 & i4 & ri & SP [ i4_imm = i4 * 4; ] {
    ri = *:4 (SP + i4_imm);
}

:LD @SP+, ri is op12=0x070 & ri & SP {
    ri = *:4 SP;
    SP = SP + 4;
}

:LD @SP+, rs is op12=0x078 & rs & SP {
    rs = *:4 SP;
    SP = SP + 4;
}

:LD @SP+, PS is op16=0x0790 & SP & PS {
    PS = *:4 SP;
    SP = SP + 4;
}

# ====

:LDUH @rj, ri is op8=0x05 & rj & ri {
    ri = zext(*:2 rj);
}

:LDUH @(AC, rj), ri is op8=0x01 & rj & ri & AC {
    ri = zext(*:2 (AC + rj));
}

:LDUH @(FP, o8_imm), ri is op4=0x4 & o8 & ri & FP [ o8_imm = o8 * 2; ] {
    ri = zext(*:2 (FP + o8_imm));
}

# ====

:LDUB @rj, ri is op8=0x06 & rj & ri {
    ri = zext(*:1 rj);
}

:LDUB @(AC, rj), ri is op8=0x02 & rj & ri & AC {
    ri = zext(*:1 (AC + rj));
}

:LDUB @(FP, o8), ri is op4=0x6 & o8 & ri & FP {
    ri = zext(*:1 (FP + o8));
}

# ====

:ST ri, @rj is op8=0x14 & rj & ri {
    *:4 rj = ri;
}

:ST ri, @(AC, rj) is op8=0x10 & rj & ri & AC {
    *:4 (AC + rj) = ri;
}

:ST ri, @(FP, o8_imm) is op4=0x3 & o8 & ri & FP [ o8_imm = o8 * 4; ] {
    *:4 (FP + o8_imm) = ri;
}

:ST ri, @(SP, u4_imm) is op8=0x13 & u4 & ri & SP [ u4_imm = u4 * 4; ] {
    *:4 (SP + u4_imm) = ri;
}

:ST ri @-SP is op12=0x170 & ri & SP {
    SP = SP - 4;
    *:4 SP = ri;
}

:ST rs @-SP is op12=0x178 & rs & SP {
    SP = SP - 4;
    *:4 SP = rs;
}

:ST PS, @-SP is op16=0x1790 & SP & PS {
    SP = SP - 4;
    *:4 SP = PS;
}

# ====

:STH ri, @rj is op8=0x15 & rj & ri {
    *:2 rj = ri:2;
}

:STH ri, @(AC, rj) is op8=0x11 & rj & ri & AC {
    *:2 (AC + rj) = ri:2;
}

:STH ri, @(FP, o8imm) is op4=0x5 & o8 & ri & FP [ o8imm = o8 * 2; ] {
    *:2 (FP + o8imm) = ri:2;
}

# ====

:STB ri, @rj is op8=0x16 & rj & ri {
    *:1 rj = ri:1;
}

:STB ri, @(AC, rj) is op8=0x12 & rj & ri & AC {
    *:1 (AC + rj) = ri:1;
}

:STB ri, @(FP, o8) is op4=0x7 & o8 & ri & FP {
    *:1 (FP + o8) = ri:1;
}

# ====

:MOV rj, ri is op8=0x8b & rj & ri {
    ri = rj;
}

:MOV rs4_4, ri is op8=0xb7 & rs4_4 & ri {
    ri = rs4_4;
}

:MOV PS, ri is op12=0x171 & ri & PS {
    ri = PS;
}

:MOV ri, rs4_4 is op8=0xb3 & rs4_4 & ri {
    rs4_4 = ri;
}

:MOV ri, PS is op12=0x071 & ri & PS {
    PS = ri;
}

# ====

:JMP @ri is op12=0x970 & ri {
    goto [ri];
}

:CALL REL_SEXT11 is op5=0x1A & REL_SEXT11 {
    RP = inst_next;
    call REL_SEXT11;
}

:CALL @ri is op12=0x971 & ri {
    RP = inst_next;
    call [ri];
}

:RET is op16=0x9720 {
    return [RP];
}

:INT #u8 is op8=0x1f & u8 {
     local ea:4 = inst_next;
    _interrupt_prelude(PS, ea);
    call [((TBR + 0x3FC) - (sext(u8:2) * 4))];
}

:INTE is op16=0x9F30 unimpl # Emulator only

:RETI is op16=0x9730 {
    local tempsp:4 = *:4 SP;
    SP = SP + 4;
    PS = *:4 SP;
    SP = SP + 4;
    loadProgramStatus();
    return [tempsp];
}

# ====

:B^CC REL is op4=0xE & CC & REL
{
    if (CC != 0) goto REL;
}

:B^CC^":D" REL is op4=0xF & CC & REL
{
    delayslot(1);
    if (CC != 0) goto REL;
}

:JMP^":D" @ri is op12=0x9f0 & ri {
    delayslot(1);
    goto [ri];
}

:CALL^":D" REL_SEXT11 is op5=0x1b & REL_SEXT11 {
    RP = inst_next;
    delayslot(1);
    call REL_SEXT11;
}

:CALL^":D" @ri is op12=0x9f1 & ri {
    RP = inst_next;
    delayslot(1);
    call [ri];
}

:RET^":D" is op16=0x9f20 {
    delayslot(1);
    return [RP];
}

# ====

:DMOV @DIR8_REL, AC is op8=0x08 & DIR8_REL & AC {
    AC = DIR8_REL;
}

:DMOV AC, @DIR8_REL is op8=0x18 & DIR8_REL & AC {
    DIR8_REL = AC;
}

:DMOV @DIR8_REL, @AC+ is op8=0x0c & DIR8_REL & AC {
    *:4 AC = DIR8_REL;
    AC = AC + 4;
}

:DMOV AC+, @DIR8_REL is op8=0x1c & DIR8_REL & AC {
    DIR8_REL = *:4 AC;
    AC = AC + 4;
}

:DMOV @DIR8_REL, @-SP is op8=0x0b & DIR8_REL & SP {
    SP = SP - 4;
    *:4 SP = DIR8_REL;
}

:DMOV @SP+, @DIR8_REL is op8=0x1b & DIR8_REL & SP {
    DIR8_REL = *:4 SP;
    SP = SP + 4;
}

# ====

:DMOVH @DIR8H_REL, AC is op8=0x09 & DIR8H_REL & AC {
    AC = zext(DIR8H_REL);
}

:DMOVH AC, @DIR8H_REL is op8=0x19 & DIR8H_REL & AC {
    DIR8H_REL = AC:2;
}

:DMOVH @DIR8H_REL, @AC+ is op8=0x0d & DIR8H_REL & AC {
    *:2 AC = DIR8H_REL;
    AC = AC + 2;
}

:DMOVH @AC+, @DIR8H_REL is op8=0x1d & DIR8H_REL & AC {
    DIR8H_REL = *:2 AC;
    AC = AC + 2;
}

# ====

:DMOVB @DIR8B_REL, AC is op8=0x0a & DIR8B_REL & AC {
    AC = zext(DIR8B_REL);
}

:DMOVB AC, @DIR8B_REL is op8=0x1a & DIR8B_REL & AC {
    DIR8B_REL = AC:1;
}

:DMOVB @DIR8B_REL, @AC+ is op8=0x0e & DIR8B_REL & AC {
    *:1 AC = DIR8B_REL;
    AC = AC + 1;
}

:DMOVB AC+, @DIR8B_REL is op8=0x1e & DIR8B_REL & AC {
    DIR8B_REL = *:1 AC;
    AC = AC + 1;
}

# ====

:LDRES @ri+, #usignedi_4 is op8=0xbc & usignedi_4 & ri {
    dma_write_chan(usignedi_4, *:4 ri);
    ri = ri + 4;
}

:STRES #usignedi_4, @ri+ is op8=0xbd & usignedi_4 & ri {
    dma_read_chan(usignedi_4, *:4 ri);
    ri = ri + 4;
}

# ====

:COPOP #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9fc & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl
:COPLD #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9fd & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl
:COPST #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9fe & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl
:COPSV #u32_4, #cc32_2, crj32_4, cri32_4 is op32_12=0x9ff & u32_4 & cc32_6 & cc32_2 & crj32_4 & cri32_4 unimpl

# ====

:NOP is op16=0x9fa0 { }

# ====

:ANDCCR #u8 is op8=0x83 & u8 {
    S = S & ((0b00100000 & u8:1) != 0);
    I = I & ((0b00010000 & u8:1) != 0);
    N = N & ((0b00001000 & u8:1) != 0);
    Z = Z & ((0b00000100 & u8:1) != 0);
    V = V & ((0b00000010 & u8:1) != 0);
    C = C & ((0b00000001 & u8:1) != 0);
}

:ORCCR #u8 is op8=0x93 & u8 {
    S = S | ((0b00100000 & u8:1) != 0);
    I = I | ((0b00010000 & u8:1) != 0);
    N = N | ((0b00001000 & u8:1) != 0);
    Z = Z | ((0b00000100 & u8:1) != 0);
    V = V | ((0b00000010 & u8:1) != 0);
    C = C | ((0b00000001 & u8:1) != 0);
}

:STILM #u8 is op8=0x87 & u8 {
    ILM = u8:1 & 0x0f;
}

:ADDSP #s8_imm is op8=0xa3 & s8 [ s8_imm = s8 * 4; ] {
    SP = SP + s8_imm;
}

# ====

:EXTSB ri is op12=0x978 & ri {
    ri = sext(ri:1);
}

:EXTUB ri is op12=0x979 & ri {
    ri = zext(ri:1);
}

:EXTSH ri is op12=0x97a & ri {
    ri = sext(ri:2);
}

:EXTUH ri is op12=0x97b & ri {
    ri = zext(ri:2);
}

:LDM0 (ldm0_list) is op8=0x8c & ldm0_list
{
	build ldm0_list;
}

:LDM1 (ldm1_list) is op8=0x8d & ldm1_list
{
	build ldm1_list;
}

:STM0 (stm0_list) is op8=0x8e & stm0_list
{
	build stm0_list;
}

:STM1 (stm1_list) is op8=0x8f & stm1_list
{
	build stm1_list;
}



# ====

:ENTER #u8_imm is op8=0x0f & u8 [ u8_imm = u8 * 4; ] {
    *:4 (SP - 4) = FP;
    FP = SP - 4;
    SP = SP - u8_imm;
}

:LEAVE is op16=0x9f90 {
    SP = FP + 4;
    FP = *:4 (SP - 4);
}

# ====

:XCHB @rj, ri is op8=0x8a & rj & ri {
    local temp:1 = ri:1;
    ri = zext(*:1 rj);
    *:1 rj = temp;
}
